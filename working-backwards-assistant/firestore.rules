rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isUserOrAdmin(userId) {
      return request.auth.uid == userId || isAdmin();
    }
    
    function isPremiumOrTrial(userId) {
      let user = get(/databases/$(database)/documents/users/$(userId)).data;
      return user.role == 'premium' || 
        (user.role == 'trial' && user.trialEndDate > request.time);
    }
    
    function canCreateSession(userId) {
      let user = get(/databases/$(database)/documents/users/$(userId)).data;
      return isAdmin() || 
        user.role == 'premium' || 
        (user.role == 'trial' && user.trialEndDate > request.time) ||
        (user.role == 'free' && user.sessionCount < user.maxSessions);
    }
    
    // User profiles - users can read/write only their own profile
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Admin users can read all user profiles
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Sessions
    match /sessions/{sessionId} {
      allow read: if resource.data.userId == request.auth.uid || isAdmin();
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid &&
                     canCreateSession(request.auth.uid);
      allow update: if resource.data.userId == request.auth.uid || isAdmin();
      allow delete: if resource.data.userId == request.auth.uid || isAdmin();
    }
    
    // Shared sessions
    match /shared_sessions/{sessionId} {
      allow read: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || 
         resource.data.sharedWith.hasAny([request.auth.uid]) ||
         isAdmin());
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid &&
                     isPremiumOrTrial(request.auth.uid);
      allow update: if resource.data.userId == request.auth.uid || isAdmin();
      allow delete: if resource.data.userId == request.auth.uid || isAdmin();
    }
    
    // Working Backwards processes - users can only access their own processes
    match /workingBackwardsProcesses/{processId} {
      // Allow read if the user is authenticated and the process belongs to them
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      
      // Allow create if the user is authenticated and setting themselves as the owner
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      
      // Allow update if the user is authenticated and the process belongs to them
      // and they're not trying to change the userId
      allow update: if request.auth != null && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == resource.data.userId;
      
      // Allow delete if the user is authenticated and the process belongs to them
      allow delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
        
      // Admin users can access all processes
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Admin-only collections
    match /adminSettings/{document=**} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 